// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       BigInt @id @default(autoincrement())
  username String @unique @db.VarChar(64)
  password String

  createdAt DateTime  @default(now()) @db.Timestamp(3)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(3)
  deletedAt DateTime? @db.Timestamp(3)

  VotingLog VotingLog[]
  Session   Session[]
}

model VoteCampaign {
  id        BigInt    @id @default(autoincrement())
  title     String    @db.VarChar(100)
  startTime DateTime  @db.Timestamp(3)
  endTime   DateTime  @db.Timestamp(3)
  createdAt DateTime  @default(now()) @db.Timestamp(3)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(3)
  deletedAt DateTime? @db.Timestamp(3)

  voteCampaignCandidateStars VoteCampaignCandidateStar[]
  VotingLog                  VotingLog[]
}

model Star {
  id        BigInt    @id @default(autoincrement())
  name      String    @db.VarChar(50)
  createdAt DateTime  @default(now()) @db.Timestamp(3)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(3)
  deletedAt DateTime? @db.Timestamp(3)

  voteCampaignCandidateStar VoteCampaignCandidateStar[]
  VotingLog                 VotingLog[]
}

model VoteCampaignCandidateStar {
  id             BigInt    @id @default(autoincrement())
  voteCampaignId BigInt    @db.BigInt
  starId         BigInt    @db.BigInt
  quantity       Int       @default(0) @db.UnsignedInt
  createdAt      DateTime  @default(now()) @db.Timestamp(3)
  updatedAt      DateTime  @default(now()) @updatedAt @db.Timestamp(3)
  deletedAt      DateTime? @db.Timestamp(3)

  voteCampaign      VoteCampaign @relation(fields: [voteCampaignId], references: [id])
  star      Star         @relation(fields: [starId], references: [id])
  VotingLog VotingLog[]

  @@unique([voteCampaignId, starId]) // 투표 캠페인에 같은 연예인이 중복 등록 되는 것 방지
}

model VotingLog {
  id                          BigInt @id @default(autoincrement())
  userId                      BigInt @db.BigInt
  voteCampaignId              BigInt @db.BigInt
  starId                      BigInt @db.BigInt
  voteCampaignCandidateStarId BigInt @db.BigInt
  quantity                    Int    @db.UnsignedInt

  createdAt DateTime  @default(now()) @db.Timestamp(3)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(3)
  deletedAt DateTime? @db.Timestamp(3)

  user                      User                      @relation(fields: [userId], references: [id])
  voteCampaign                      VoteCampaign              @relation(fields: [voteCampaignId], references: [id])
  star                      Star                      @relation(fields: [starId], references: [id])
  voteCampaignCandidateStar VoteCampaignCandidateStar @relation(fields: [voteCampaignCandidateStarId], references: [id])
}

model Session {
  id     BigInt @id @default(autoincrement())
  userId BigInt @db.BigInt
  jti    String @db.VarChar(255)

  createdAt DateTime  @default(now()) @db.Timestamp(3)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(3)
  deletedAt DateTime? @db.Timestamp(3)

  user User @relation(fields: [userId], references: [id])
}
